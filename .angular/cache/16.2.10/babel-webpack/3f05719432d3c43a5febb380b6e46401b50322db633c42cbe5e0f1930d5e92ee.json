{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nexport let RegistrationFormComponent = class RegistrationFormComponent {\n  constructor(fb, http) {\n    this.fb = fb;\n    this.http = http;\n    this.locations = ['Tamilnadu', 'AP'];\n    this.colleges = {\n      'Tamilnadu': ['tn1', 'tn2'],\n      'AP': ['ap1', 'ap2']\n    };\n    this.form = this.fb.group({\n      name: ['', Validators.required],\n      gender: ['', Validators.required],\n      dob: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email, Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\")]],\n      password: ['', [Validators.required, Validators.minLength(8)]],\n      locations: ['', Validators.required],\n      colleges: ['', Validators.required],\n      location: new FormControl(''),\n      college: new FormControl('')\n    });\n  }\n  getColleges() {\n    const selectedloc = this.form.get('location')?.value;\n    return selectedloc ? this.colleges[selectedloc] || [] : [];\n  }\n  submitForm() {\n    // Check if the form is valid before submitting\n    if (this.form.valid) {\n      // Your submission logic here\n      console.log(this.form.value); // For example, logging the form value\n    }\n  }\n\n  get emailControl() {\n    return this.form.get('email');\n  }\n  get formControls() {\n    return this.form.controls;\n  }\n};\nRegistrationFormComponent = __decorate([Component({\n  selector: 'app-registration-form',\n  templateUrl: './registration-form.component.html',\n  styleUrls: ['registration-form.component.css']\n})], RegistrationFormComponent);","map":{"version":3,"names":["Component","FormControl","Validators","RegistrationFormComponent","constructor","fb","http","locations","colleges","form","group","name","required","gender","dob","email","pattern","password","minLength","location","college","getColleges","selectedloc","get","value","submitForm","valid","console","log","emailControl","formControls","controls","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\w136647\\OneDrive - Worldline\\Bureau\\angularpjt\\src\\app\\registration-form\\registration-form.component.ts"],"sourcesContent":["import {Component} from '@angular/core';\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\nimport {HttpClient} from '@angular/common/http';\n\n\n@Component({\n    selector: 'app-registration-form',\n    templateUrl:'./registration-form.component.html',\n    styleUrls:['registration-form.component.css'],\n    \n})\n\nexport class RegistrationFormComponent{\n    value:any;\n    locations:string[]=['Tamilnadu','AP'];\n    colleges:{[key:string]:string[]}={\n        'Tamilnadu':['tn1','tn2'],\n        'AP':['ap1','ap2'],\n    }\nform:FormGroup;\n    \n\nconstructor(private fb:FormBuilder, private http:HttpClient){\n    this.form=this.fb.group({\n        \n        name:['', Validators.required],\n        gender:['', Validators.required],\n        dob:['', Validators.required],\n        email: ['', [Validators.required, Validators.email,Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$\")]],\n        password: ['', [Validators.required, Validators.minLength(8)]],\n        locations:['',Validators.required],\n        colleges:['', Validators.required],\n        location:new FormControl(''),\n        college:new FormControl('')\n    })\n   \n\n}\ngetColleges(){\n    const selectedloc=this.form.get('location')?.value;\n    return selectedloc ? this.colleges[selectedloc] || [] :[];\n}\nsubmitForm() {\n    // Check if the form is valid before submitting\n    if (this.form.valid) {\n      // Your submission logic here\n      console.log(this.form.value); // For example, logging the form value\n    }\n  }\n  get emailControl() {\n    return this.form.get('email');\n  }\n  get formControls() {\n    return this.form.controls;\n  }\n}"],"mappings":";AAAA,SAAQA,SAAS,QAAO,eAAe;AACvC,SAAqBC,WAAW,EAAaC,UAAU,QAAO,gBAAgB;AAWvE,WAAMC,yBAAyB,GAA/B,MAAMA,yBAAyB;EAUtCC,YAAoBC,EAAc,EAAUC,IAAe;IAAvC,KAAAD,EAAE,GAAFA,EAAE;IAAsB,KAAAC,IAAI,GAAJA,IAAI;IAR5C,KAAAC,SAAS,GAAU,CAAC,WAAW,EAAC,IAAI,CAAC;IACrC,KAAAC,QAAQ,GAAyB;MAC7B,WAAW,EAAC,CAAC,KAAK,EAAC,KAAK,CAAC;MACzB,IAAI,EAAC,CAAC,KAAK,EAAC,KAAK;KACpB;IAKD,IAAI,CAACC,IAAI,GAAC,IAAI,CAACJ,EAAE,CAACK,KAAK,CAAC;MAEpBC,IAAI,EAAC,CAAC,EAAE,EAAET,UAAU,CAACU,QAAQ,CAAC;MAC9BC,MAAM,EAAC,CAAC,EAAE,EAAEX,UAAU,CAACU,QAAQ,CAAC;MAChCE,GAAG,EAAC,CAAC,EAAE,EAAEZ,UAAU,CAACU,QAAQ,CAAC;MAC7BG,KAAK,EAAE,CAAC,EAAE,EAAE,CAACb,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACa,KAAK,EAACb,UAAU,CAACc,OAAO,CAAC,2CAA2C,CAAC,CAAC,CAAC;MACpHC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACf,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACgB,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9DX,SAAS,EAAC,CAAC,EAAE,EAACL,UAAU,CAACU,QAAQ,CAAC;MAClCJ,QAAQ,EAAC,CAAC,EAAE,EAAEN,UAAU,CAACU,QAAQ,CAAC;MAClCO,QAAQ,EAAC,IAAIlB,WAAW,CAAC,EAAE,CAAC;MAC5BmB,OAAO,EAAC,IAAInB,WAAW,CAAC,EAAE;KAC7B,CAAC;EAGN;EACAoB,WAAWA,CAAA;IACP,MAAMC,WAAW,GAAC,IAAI,CAACb,IAAI,CAACc,GAAG,CAAC,UAAU,CAAC,EAAEC,KAAK;IAClD,OAAOF,WAAW,GAAG,IAAI,CAACd,QAAQ,CAACc,WAAW,CAAC,IAAI,EAAE,GAAE,EAAE;EAC7D;EACAG,UAAUA,CAAA;IACN;IACA,IAAI,IAAI,CAAChB,IAAI,CAACiB,KAAK,EAAE;MACnB;MACAC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACnB,IAAI,CAACe,KAAK,CAAC,CAAC,CAAC;;EAElC;;EACA,IAAIK,YAAYA,CAAA;IACd,OAAO,IAAI,CAACpB,IAAI,CAACc,GAAG,CAAC,OAAO,CAAC;EAC/B;EACA,IAAIO,YAAYA,CAAA;IACd,OAAO,IAAI,CAACrB,IAAI,CAACsB,QAAQ;EAC3B;CACD;AA3CY5B,yBAAyB,GAAA6B,UAAA,EAPrChC,SAAS,CAAC;EACPiC,QAAQ,EAAE,uBAAuB;EACjCC,WAAW,EAAC,oCAAoC;EAChDC,SAAS,EAAC,CAAC,iCAAiC;CAE/C,CAAC,C,EAEWhC,yBAAyB,CA2CrC"},"metadata":{},"sourceType":"module","externalDependencies":[]}